import asyncio
import imghdr
import os.path
import time
import validators

from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart, Text
from aiogram.dispatcher.storage import FSMContext
from aiogram.types import ReplyKeyboardRemove, ContentType

from create_bot import dp, bot
from handlers.rules import RULES
from keyboard.default.inline_keyboards import ModeratorSurveyInlineKeyboard
from keyboard.default.keyboards import *
from pkg.db.user_func import *
from pkg.settings import settings
from states.start_state import StartState
from utils.validations import Validations
from utils.config_utils import ConfigUtils
from utils.context_helper import ContextHelper
from utils.get_name import split_fullname
from utils.send_card import send_card, send_full_card
from utils.delete_user import delete_user


@logger.catch
@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):
    logger.info(f'–ö–æ–º–∞–Ω–¥–∞ {message.text} –æ—Ç @{message.from_user.username} (id: {message.from_user.id})')
    if await Validations.moder_validation_for_supergroups(message):
        text = '–ü—Ä–∏–≤–µ—Ç!\n\n' \
               '–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –≤ –®–∫–æ–ª–µ IT!\n\n' \
               '–®–∫–æ–ª–∞ IT Terra —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–º–æ—â–∏ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–º —Ñ–æ–Ω–¥–∞–º –∏ –ª—é–¥—è–º.' \
               ' –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤–Ω–æ—Å–∏—Ç –≤–∫–ª–∞–¥ –≤ –æ–±—â–µ–µ –¥–µ–ª–æ. ' \
               '–®–∫–æ–ª–∞ ‚Äì —ç—Ç–æ –∫–æ–º—å—é–Ω–∏—Ç–∏, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –≤—Å–µ–º –∂–µ–ª–∞—é—â–∏–º. –ú—ã —É—á–∏–º—Å—è –Ω–æ–≤–æ–º—É –∏ –≤—Å–µ–≥–¥–∞ ' \
               '–≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –≤–æ–∑–Ω–∏–∫—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.\n\n' \
               '–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–ª–∏—Å—å —Å–∞–º—ã–µ –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–µ, —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–µ –∏ –ø—Ä–∏–≤–µ—Ç–ª–∏–≤—ã–µ –ª—é–¥–∏.' \
               ' –ú—ã –æ–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–æ–≤–∏—á–∫–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤ –Ω–µ —Ç–æ–ª—å–∫–æ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –†–æ—Å—Å–∏–∏,' \
               ' –Ω–æ –∏ –º–∏—Ä–∞.\n\n' \
               '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –®–∫–æ–ª—É, –ø—Ä–æ—Å–∏–º –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤'
        await message.answer(text, reply_markup=ChoiceKeyboard.get_reply_keyboard())
        await StartState.rules.set()


@logger.catch
@dp.message_handler(commands='moder')
async def moder_menu(message: types.Message, state: FSMContext):
    logger.info(f'–ö–æ–º–∞–Ω–¥–∞ {message.text} –æ—Ç @{message.from_user.username} (id: {message.from_user.id})')
    if await Validations.moder_validation_for_supergroups(message):
        if await Validations.validation_for_moderator(message):
    # try:
    #     user = await get_user_by_tg_id(message.from_user.id)
    #     if user.is_moderator:
            commands_for_moder = '–ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:\n\n' \
                                 '/department - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–¥–µ–ª –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º.\n\n' \
                                 '/project -  –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º.\n\n' \
                                 '/review_cards - —Ä–∞–±–æ—Ç–∞ —Å–æ –≤—Å–µ–º–∏ –Ω–µ–∞–ø—Ä—É–≤–Ω—É—Ç—ã–º–∏ —É—á–µ–Ω–∏–∫–∞–º–∏.\n\n' \
                                 '/change_card_by_moder - –∏–∑–º–µ–Ω–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤\n\n' \
                                 '/blind_change - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –≤—Å–ª–µ–ø—É—é (–∫–æ–≥–¥–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–±–∞–≥–æ–≤–∞–Ω–∞)'
            await message.answer(text=commands_for_moder,
                                 reply_markup=StopBotKeyboard.get_reply_keyboard(add_stop=False))
            await state.finish()
        else:
            await message.answer('–í—ã –Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä',
                                 reply_markup=ReplyKeyboardRemove())
            await state.finish()
    # except (TypeError, AttributeError):
    #     await message.answer('–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é',
    #                          reply_markup=ReplyKeyboardRemove())
    #     await state.finish()


@logger.catch
@dp.message_handler(commands='stop', state='*')
@dp.message_handler(Text(equals=ButtonFactory.get_stop_message()), state='*')
async def bot_stop(message: types.Message, state: FSMContext):
    logger.info(f'–ö–æ–º–∞–Ω–¥–∞ /stop –æ—Ç @{message.from_user.username} (id: {message.from_user.id})')
    if await Validations.moder_validation_for_supergroups(message):
        text = '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞'
        await message.answer(text, reply_markup=types.ReplyKeyboardRemove())
        await state.finish()


@logger.catch
@dp.message_handler(commands='iammoder')
async def get_moder(message: types.Message):
    logger.info(f'–ö–æ–º–∞–Ω–¥–∞ {message.text} –æ—Ç @{message.from_user.username} (id: {message.from_user.id})')
    if await Validations.moder_validation_for_supergroups(message):
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞', reply_markup=StopBotKeyboard.get_reply_keyboard())
        await StartState.get_moder.set()


@logger.catch
@dp.message_handler(state=StartState.rules_for_refilling)
async def get_rules(message: types.Message):
    logger.info(f'StartState.rules_for_refilling —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text}'
                f' -> @{message.from_user.username} (id: {message.from_user.id})')
    text = '–ß—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É, –Ω–∞–ø–æ–º–Ω–∏–º –ø—Ä–∞–≤–∏–ª–∞ :)'
    await message.answer(text, reply_markup=ChoiceKeyboard.get_reply_keyboard())
    await StartState.rules.set()


@logger.catch
@dp.message_handler(state=StartState.rules)
async def reading_rules(message: types.Message, state: FSMContext):
    logger.info(f'StartState.rules —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text} '
                f'-> @{message.from_user.username} (id: {message.from_user.id})')
    answer = message.text
    if await Validations.is_command(answer):
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞',
                             reply_markup=ChoiceKeyboard.get_reply_keyboard())
    elif answer == ChoiceKeyboard.A_READ_RULES:
        await message.answer(RULES, reply_markup=ReplyKeyboardRemove())
        await message.answer('–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏?', reply_markup=AgreementKeyboard.get_reply_keyboard())
        await StartState.rule_decision.set()
    elif answer == ChoiceKeyboard.B_DONT_READ_RULES:
        await message.answer(
            '–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –Ω–∞—à–µ —Å –í–∞–º–∏ –æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É üòî\n–ï—Å–ª–∏ –í—ã –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, '
            '—Ç–æ —è –≤—Å–µ–≥–¥–∞ —Ç—É—Ç! –ù—É–∂–Ω–æ –ª–∏—à—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start',
            reply_markup=ReplyKeyboardRemove())
        await state.reset_state()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        await StartState.rules.set()


@logger.catch
@dp.message_handler(state=StartState.rule_decision)
async def decision_about_rules(message: types.Message, state: FSMContext):
    logger.info(f'StartState.rule_decision —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text} '
                f'-> @{message.from_user.username} (id: {message.from_user.id})')
    answer = message.text
    if await Validations.is_command(answer):
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞',
                             reply_markup=ConfidentialKeyboard.get_reply_keyboard())
    elif answer == AgreementKeyboard.A_AGREE_WITH_RULES:
        # await message.answer('–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É, –º—ã —Ö–æ—Ç–∏–º —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –í–∞—à–∏ –∞–Ω–∫–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç'
        #                      ' —Ö—Ä–∞–Ω–∏—Ç—Å—è —É —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –¥–æ—Å—Ç—É–ø –∫ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –æ–±—â–∏–º –¥–ª—è –≤—Å–µ—Ö –∂–µ–ª–∞—é—â–∏—Ö.\n\n'
        #                      '–ú—ã –ø–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º–æ –ø–æ –ª–∏—á–Ω—ã–º —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º.\n\n'
        #                      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
        #                      reply_markup=ConfidentialKeyboard.get_reply_keyboard())
        await message.answer('–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É, –º—ã —Ö–æ—Ç–∏–º —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –í–∞—à–∏ –∞–Ω–∫–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç'
                             ' —Ö—Ä–∞–Ω–∏—Ç—Å—è —É —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –¥–æ—Å—Ç—É–ø –∫ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ —à–∫–æ–ª—ã.\n\n'
                             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
                             reply_markup=ConfidentialKeyboard.get_reply_keyboard())
        await StartState.confidential_decision.set()
    elif answer == AgreementKeyboard.B_DONT_AGREE_WITH_RULES:
        await message.answer('–ñ–∞–ª—å, —á—Ç–æ –≤–∞—Å –Ω–µ —É—Å—Ç—Ä–æ–∏–ª–∏ –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞ üòî\n'
                             '–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –º–æ–∂–µ—Ç–µ '
                             '–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start',
                             reply_markup=ReplyKeyboardRemove())
        await state.reset_state()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        await StartState.rule_decision.set()


@logger.catch
@dp.message_handler(state=StartState.confidential_decision)
async def confidential_decision(message: types.Message, state: FSMContext):
    logger.info(f'StartState.confidential_decision —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text} '
                f'-> @{message.from_user.username} (id: {message.from_user.id})')
    answer = message.text
    if await Validations.is_command(answer):
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞',
                             reply_markup=AgreementKeyboard.get_reply_keyboard())
    elif answer == ConfidentialKeyboard.A_CONFIDENTIAL_AGREE:
        print(message.from_user.id)
        if await get_user_by_tg_id(tg_id=message.from_user.id) is None:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û üñä',
                                 reply_markup=StopBotKeyboard.get_reply_keyboard())
            await StartState.gender.set()
        else:
            await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?',
                                 reply_markup=YesNoKeyboard.get_reply_keyboard())
            await StartState.update_info.set()
    elif answer == ConfidentialKeyboard.B_CONFIDENTIAL_DISAGREE:
        await message.answer('–ñ–∞–ª—å, —á—Ç–æ –í—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n'
                             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n'
                             '–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –º–æ–∂–µ—Ç–µ '
                             '–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start',
                             reply_markup=ReplyKeyboardRemove())
        await state.reset_state()
    else:
        await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        await StartState.confidential_decision.set()


@logger.catch
@dp.message_handler(state=StartState.update_info)
async def update_info(message: types.Message):
    logger.info(f'StartState.update_info —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text} '
                f'-> @{message.from_user.username} (id: {message.from_user.id})')
    answer = message.text
    if await Validations.is_command(answer):
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞',
                             reply_markup=YesNoKeyboard.get_reply_keyboard())
    elif answer == YesNoKeyboard.A_YES:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û üñä',
                             reply_markup=StopBotKeyboard.get_reply_keyboard())
        tg_id = message.from_user.id
        await delete_user_by_tg_id(telegram_id=tg_id)
        await StartState.gender.set()
    elif answer == YesNoKeyboard.B_NO:
        await message.answer('–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –í–∞—à—É –∞–Ω–∫–µ—Ç—É?',
                             reply_markup=YesNoKeyboard.get_reply_keyboard())
        await StartState.choice.set()


@logger.catch
@dp.message_handler(state=StartState.choice)
async def questionnaire_choice(message: types.Message, state: FSMContext):
    logger.info(f'StartState.choice —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text} '
                f'-> @{message.from_user.username} (id: {message.from_user.id})')
    answer = message.text
    if await Validations.is_command(answer):
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞',
                             reply_markup=YesNoKeyboard.get_reply_keyboard())
    elif answer == YesNoKeyboard.A_YES:
        await message.answer('–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                             reply_markup=CheckAccessKeyboard.get_reply_keyboard(add_stop=False))
        await StartState.check_questionnaire.set()
    elif answer == YesNoKeyboard.B_NO:
        await message.answer('–û–∫. –í–æ–∑–≤—Ä–∞—â–∞—é –í–∞—Å –≤ –Ω–∞—á–∞–ª–æ',
                             reply_markup=ReplyKeyboardRemove())
        await state.reset_state()


@logger.catch
@dp.message_handler(state=StartState.gender)
async def get_user_gender(message: types.Message, state: FSMContext):
    logger.info(f'StartState.gender —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text} '
                f'-> @{message.from_user.username} (id: {message.from_user.id})')
    answer = message.text
    if await Validations.is_command(answer):
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û',
                             reply_markup=StopBotKeyboard.get_reply_keyboard())
    else:
        if len(answer.split(' ')) < 2:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è',
                                 reply_markup=StopBotKeyboard.get_reply_keyboard())
        else:
            surname, name, patronymic = split_fullname(answer)
            if name.isalpha():
                user = User()
                user.join_time = datetime.date.today()
                user.telegram_id = message.from_user.id
                user.tg_login = f'@{message.from_user.username}'
                user.surname, user.name, user.patronymic = surname, name, patronymic
                await add_new_user(user)
                await ContextHelper.add_user(user, state)
                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –ø–æ–ª',
                                     reply_markup=GenderKeyboard.get_reply_keyboard())
                await StartState.photo.set()
            else:
                await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –§–ò–û\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n'
                                     '–ú–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –æ—Ç—á–µ—Å—Ç–≤–æ\n–ò–º—è —É–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.')
                await StartState.gender.set()


@logger.catch
@dp.message_handler(state=StartState.photo)
async def ask_about_photo(message: types.Message, state: FSMContext):
    logger.info(f'StartState.photo —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text} '
                f'-> @{message.from_user.username} (id: {message.from_user.id})')
    answer = message.text
    if await Validations.is_command(answer):
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞',
                             reply_markup=GenderKeyboard.get_reply_keyboard())
    else:
        user = await ContextHelper.get_user(state)
        if answer == GenderKeyboard.A_MALE_GENDER:
            user.gender = '–ú—É–∂—Å–∫–æ–π'
        elif answer == GenderKeyboard.B_FEMALE_GENDER:
            user.gender = '–ñ–µ–Ω—Å–∫–∏–π'
        else:
            await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
            await StartState.photo.set()
            return
        await update_user_by_telegram_id(message.from_user.id, user)
        await ContextHelper.add_user(user, state)
        await message.answer('–•–æ—Ç–∏—Ç–µ –ª–∏ –í—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–µ —Ñ–æ—Ç–æ?',
                             reply_markup=PhotoKeyboard.get_reply_keyboard())
        await StartState.decision_about_photo.set()


@logger.catch
@dp.message_handler(state=StartState.decision_about_photo)
async def decision_about_photo(message: types.Message):
    logger.info(f'StartState.decision_about_photo —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text}'
                f' –æ—Ç @{message.from_user.username} (id: {message.from_user.id})')
    answer = message.text
    if await Validations.is_command(answer):
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞',
                             reply_markup=PhotoKeyboard.get_reply_keyboard())
    else:
        if answer == PhotoKeyboard.A_WANT_UPLOAD_PHOTO:
            await message.answer('–°—É–ø–µ—Ä! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ.',
                                 reply_markup=StopBotKeyboard.get_reply_keyboard())
            await StartState.upload_photo.set()
        elif answer == PhotoKeyboard.B_DONT_WANT_UPLOAD_PHOTO:
            await message.answer('–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ üìù',
                                 reply_markup=StopBotKeyboard.get_reply_keyboard())
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ Kaiten üìß')
            await StartState.gitlab.set()
        else:
            await message.answer('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! ‚õî \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
            await StartState.decision_about_photo.set()


@logger.catch
@dp.message_handler(state=StartState.upload_photo,
                    content_types=[ContentType.PHOTO, ContentType.DOCUMENT])
async def upload_photo(message: types.Message, state: FSMContext):
    logger.info(f'StartState.upload_photo —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text}'
                f' –æ—Ç @{message.from_user.username} (id: {message.from_user.id})')
    timestamp = str(time.time()).replace('.', '')
    file_name = f'photo_{timestamp}.jpg'
    file_path = os.path.join(ConfigUtils.get_temp_path(), file_name)
    user = await ContextHelper.get_user(state)
    if not message.content_type == 'photo':
        file = await bot.get_file(message.document.file_id)
        await bot.download_file(file.file_path, file_path)
    else:
        await message.photo[-1].download(destination_file=file_path)
    with open(file_path, 'rb') as file:
        if not imghdr.what(file):
            await message.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.', reply_markup=StopBotKeyboard.get_reply_keyboard())
            await StartState.upload_photo.set()
        else:
            user.photo = file.read()
            await update_user_by_telegram_id(message.from_user.id, user)
            await ContextHelper.add_user(user, state)
            await message.answer('–°–ø–∞—Å–∏–±–æ!')
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É üìß', reply_markup=StopBotKeyboard.get_reply_keyboard())
            await StartState.gitlab.set()
    if os.path.exists(file_path):
        os.remove(file_path)


@logger.catch
@dp.message_handler(state=StartState.gitlab)
async def get_gitlab(message: types.Message, state: FSMContext):
    logger.info(f'StartState.gitlab —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text} '
                f'-> @{message.from_user.username} (id: {message.from_user.id})')
    answer = message.text
    if await Validations.is_command(answer):
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É',
                             reply_markup=StopBotKeyboard.get_reply_keyboard())
    elif validators.email(answer):
        user = await ContextHelper.get_user(state)
        user.email = answer
        await update_user_by_telegram_id(message.from_user.id, user)
        await ContextHelper.add_user(user, state)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, –≤ –∫–∞–∫–æ–π –±—ã –æ—Ç–¥–µ–ª –í—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ø–∞—Å—Ç—å?',
                             reply_markup=await DepartmentsKeyboard.get_reply_keyboard())
        await StartState.department.set()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—á—Ç—ã',
                             reply_markup=StopBotKeyboard.get_reply_keyboard())


@logger.catch
@dp.message_handler(state=StartState.department)
async def get_department(message: types.Message, state: FSMContext):
    logger.info(f'StartState.department —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text} '
                f'-> @{message.from_user.username} (id: {message.from_user.id})')
    answer = message.text
    if await Validations.is_command(answer):
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –æ—Ç–¥–µ–ª',
                             reply_markup=await DepartmentsKeyboard.get_reply_keyboard())
    elif answer == 'Design':
        user = await ContextHelper.get_user(state)
        user.desired_department = answer
        await update_user_by_telegram_id(message.from_user.id, user)
        await ContextHelper.add_user(user, state)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É –Ω–∞ –±–µ—Ö–∞–Ω—Å üåê',
                             reply_markup=StopBotKeyboard.get_reply_keyboard())
        await StartState.get_skills_design.set()
    else:
        user = await ContextHelper.get_user(state)
        user.desired_department = answer
        await update_user_by_telegram_id(message.from_user.id, user)
        await ContextHelper.add_user(user, state)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É –Ω–∞ gitlab üåê',
                             reply_markup=StopBotKeyboard.get_reply_keyboard())
        await StartState.get_skills_dev.set()


@logger.catch
@dp.message_handler(state=StartState.get_skills_design)
async def get_skills_design(message: types.Message, state: FSMContext):
    logger.info(f'StartState.get_skills_design —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text} '
                f'-> @{message.from_user.username} (id: {message.from_user.id})')
    answer = message.text
    if await Validations.is_command(answer):
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Behance',
                             reply_markup=ReplyKeyboardRemove())
    elif not validators.url(answer):
        await message.answer('–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Behance',
                             reply_markup=ReplyKeyboardRemove())
    else:
        user = await ContextHelper.get_user(state)
        user.behance = answer
        await update_user_by_telegram_id(message.from_user.id, user)
        await ContextHelper.add_user(user, state)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞',
                             reply_markup=StopBotKeyboard.get_reply_keyboard())
        await StartState.get_city.set()


@logger.catch
@dp.message_handler(state=StartState.get_skills_dev)
async def get_skills_dev(message: types.Message, state: FSMContext):
    logger.info(f'StartState.get_skills_dev —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text} '
                f'-> @{message.from_user.username} (id: {message.from_user.id})')
    answer = message.text
    if await Validations.is_command(answer):
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Gitlab',
                             reply_markup=StopBotKeyboard.get_reply_keyboard())
    elif not validators.url(answer):
        await message.answer('–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Gitlab',
                             reply_markup=StopBotKeyboard.get_reply_keyboard())
    else:
        user = await ContextHelper.get_user(state)
        user.git = answer
        await update_user_by_telegram_id(message.from_user.id, user)
        await ContextHelper.add_user(user, state)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞',
                             reply_markup=StopBotKeyboard.get_reply_keyboard())
        await StartState.get_city.set()


@logger.catch
@dp.message_handler(state=StartState.get_city)
async def get_city(message: types.Message, state: FSMContext):
    logger.info(f'StartState.get_city —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text} '
                f'-> @{message.from_user.username} (id: {message.from_user.id})')
    answer = message.text
    if await Validations.is_command(answer):
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ',
                             reply_markup=StopBotKeyboard.get_reply_keyboard())
    elif await Validations.length(answer, minimum=0, maximum=30):
        await message.answer('–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤')
    else:
        user = await ContextHelper.get_user(state)
        user.city = answer
        await update_user_by_telegram_id(message.from_user.id, user)
        await ContextHelper.add_user(user, state)
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—É–¥–∞ –í—ã —É–∑–Ω–∞–ª–∏ –æ –®–∫–æ–ª–µ IT?',
                             reply_markup=StopBotKeyboard.get_reply_keyboard())
        await StartState.get_source.set()


@logger.catch
@dp.message_handler(state=StartState.get_source)
async def get_source(message: types.Message, state: FSMContext):
    logger.info(f'StartState.get_source —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text} '
                f'-> @{message.from_user.username} (id: {message.from_user.id})')
    answer = message.text
    if await Validations.is_command(answer):
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–∫—É–¥–∞ –í—ã —É–∑–Ω–∞–ª–∏ –æ —à–∫–æ–ª–µ',
                             reply_markup=StopBotKeyboard.get_reply_keyboard())
    elif await Validations.length(answer, minimum=0, maximum=30):
        await message.answer('–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤')
    else:
        user = await ContextHelper.get_user(state)
        user.source_of_knowledge = answer
        await update_user_by_telegram_id(message.from_user.id, user)
        await ContextHelper.add_user(user, state)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏\n'
                             '–ù–∞–ø—Ä–∏–º–µ—Ä: Python, Postgresql, Git, FastAPI, '
                             'Django, Go, aiogramm, asyncio', reply_markup=StopBotKeyboard.get_reply_keyboard())
        await StartState.expectations.set()


@logger.catch
@dp.message_handler(state=StartState.expectations)
async def get_goals(message: types.Message, state: FSMContext):
    logger.info(f'StartState.expectations —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text} '
                f'-> @{message.from_user.username} (id: {message.from_user.id})')
    answer = message.text
    if await Validations.is_command(answer):
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏',
                             reply_markup=StopBotKeyboard.get_reply_keyboard())
    else:
        user = await ContextHelper.get_user(state)
        user.skills = answer
        await update_user_by_telegram_id(message.from_user.id, user)
        await ContextHelper.add_user(user, state)
        await message.answer('–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ (—á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é) –í—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç—É?',
                             reply_markup=StopBotKeyboard.get_reply_keyboard())
        await StartState.time_for_work.set()


# 1111111111111111111111111111
@logger.catch
@dp.message_handler(state=StartState.time_for_work)
async def get_time_for_work(message: types.Message, state: FSMContext):
    logger.info(f'StartState.time_for_work —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text} '
                f'-> @{message.from_user.username} (id: {message.from_user.id})')
    answer = message.text
    if await Validations.is_command(answer):
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É. '
                             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é –í—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç—É?',
                             reply_markup=StopBotKeyboard.get_reply_keyboard())
    else:
        user = await ContextHelper.get_user(state)
        user.time_for_work = answer
        await update_user_by_telegram_id(message.from_user.id, user)
        await ContextHelper.add_user(user, state)
        await message.answer('–ö–∞–∫–∏–µ –∫—É—Ä—Å—ã –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏?',
                             reply_markup=StopBotKeyboard.get_reply_keyboard())
        await StartState.education.set()

# 22222222222222222222222
@logger.catch
@dp.message_handler(state=StartState.education)
async def get_education(message: types.Message, state: FSMContext):
    logger.info(f'StartState.education —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text} '
                f'-> @{message.from_user.username} (id: {message.from_user.id})')
    answer = message.text
    if await Validations.is_command(answer):
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∞–∫–∏–µ –∫—É—Ä—Å—ã –≤—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏?',
                             reply_markup=StopBotKeyboard.get_reply_keyboard())
    else:
        user = await ContextHelper.get_user(state)
        user.education = answer
        await update_user_by_telegram_id(message.from_user.id, user)
        await ContextHelper.add_user(user, state)
        await message.answer('–ï—Å—Ç—å –ª–∏ —É –í–∞—Å –∂–µ–ª–∞–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —à–∫–æ–ª–æ–π?',
                             reply_markup=StopBotKeyboard.get_reply_keyboard())
        await StartState.management_wish.set()

# 333333333333333333333333333333333333
@logger.catch
@dp.message_handler(state=StartState.management_wish)
async def get_management_wish(message: types.Message, state: FSMContext):
    logger.info(f'StartState.management_wish —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text} '
                f'-> @{message.from_user.username} (id: {message.from_user.id})')
    answer = message.text
    if await Validations.is_command(answer):
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É. '
                             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –∂–µ–ª–∞–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —à–∫–æ–ª–æ–π.',
                             reply_markup=StopBotKeyboard.get_reply_keyboard())
    elif await Validations.length(answer, minimum=0, maximum=30):
        await message.answer('–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤')
    else:
        user = await ContextHelper.get_user(state)
        user.management_wish = answer
        await update_user_by_telegram_id(message.from_user.id, user)
        await ContextHelper.add_user(user, state)

        # await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—É–¥–∞ –í—ã —É–∑–Ω–∞–ª–∏ –æ –®–∫–æ–ª–µ IT?',
        #                      reply_markup=StopBotKeyboard.get_reply_keyboard())
        # await StartState.get_source.set()
        await message.answer('–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. '
                             '–ü–æ–∫–∞ –µ–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω',
                             reply_markup=CheckAccessKeyboard.get_reply_keyboard(add_stop=False))
        await bot.send_message(chat_id=settings.TELEGRAM_MODERS_CHAT_ID, text=f'–ü—Ä–∏—à–ª–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ {user.tg_login}')
        await send_full_card(chat_id=settings.TELEGRAM_MODERS_CHAT_ID,
                             user=user,
                             reply_markup=ModeratorSurveyInlineKeyboard(
                                 page=0,
                                 telegram_id=user.telegram_id,
                                 user_name=user.tg_login
                             ).get_inline_keyboard())
        await StartState.check_questionnaire.set()
# vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv




# @logger.catch
# @dp.message_handler(state=StartState.development_vector)
# async def get_development_vector(message: types.Message, state: FSMContext):
#     logger.info(f'StartState.development_vector —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text} '
#                 f'-> @{message.from_user.username} (id: {message.from_user.id})')
#     answer = message.text
#     if await Validations.is_command(answer):
#         await message.answer('–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç —à–∫–æ–ª—ã',
#                              reply_markup=StopBotKeyboard.get_reply_keyboard(add_stop=False))
#     else:
#         user = await ContextHelper.get_user(state)
#         user.goals = f'–û–∂–∏–¥–∞–Ω–∏—è: {answer}'
#         await update_user_by_telegram_id(message.from_user.id, user)
#         await ContextHelper.add_user(user, state)
#         await message.answer('–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≤–µ–∫—Ç–æ—Ä —Ä–∞–∑–≤–∏—Ç–∏—è',
#                              reply_markup=ReplyKeyboardRemove())
#         await StartState.finish_questions.set()
#
#
# @logger.catch
# @dp.message_handler(state=StartState.finish_questions)
# async def finish_questions(message: types.Message, state: FSMContext):
#     logger.info(f'StartState.finish_questions —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text} '
#                 f'-> @{message.from_user.username} (id: {message.from_user.id})')
#     answer = message.text
#     if await Validations.is_command(answer):
#         await message.answer('–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –≤–µ–∫—Ç–æ—Ä —Ä–∞–∑–≤–∏—Ç–∏—è',
#                              reply_markup=StopBotKeyboard.get_reply_keyboard(add_stop=False))
#     else:
#         user = await ContextHelper.get_user(state)
#         user.goals += f'\n–í–µ–∫—Ç–æ—Ä —Ä–∞–∑–≤–∏—Ç–∏—è: {answer}'
#         await update_user_by_telegram_id(message.from_user.id, user)
#         await ContextHelper.add_user(user, state)
#         await message.answer('–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. '
#                              '–ü–æ–∫–∞ –µ–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω',
#                              reply_markup=CheckAccessKeyboard.get_reply_keyboard(add_stop=False))
#         await bot.send_message(chat_id=settings.TELEGRAM_MODERS_CHAT_ID, text=f'–ü—Ä–∏—à–ª–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ {user.tg_login}')
#         await send_full_card(chat_id=settings.TELEGRAM_MODERS_CHAT_ID,
#                              user=user,
#                              reply_markup=ModeratorSurveyInlineKeyboard(
#                                  page=0,
#                                  telegram_id=user.telegram_id,
#                                  user_name=user.tg_login
#                              ).get_inline_keyboard())
#         await StartState.check_questionnaire.set()




# @logger.catch
# @dp.message_handler(state=StartState.check_questionnaire)
# async def check_questionnaire(message: types.Message, state: FSMContext):
#     logger.info(f'StartState.check_questionnaire —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text} '
#                 f'-> @{message.from_user.username} (id: {message.from_user.id})')
#     answer = message.text
#     if answer == CheckAccessKeyboard.A_CHECK_ACCESS:
#         try:
#             user = await get_user_by_tg_login(f'@{message.from_user.username}')
#             if user.is_approved:
#                 text = '–ê–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤–æ –≤—Å–µ ' \
#                        '—Å–ª–µ–¥—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –¥–Ω–µ–π:\n{}\n'. \
#                     format('–®–∫–æ–ª–∞ IT:\nhttps://t.me/+qGGF9z5Jy8MwMDA8'
#                            '\n\n–ü—Ä–æ–µ–∫—Ç—ã:\nhttps://t.me/+HwhF6emf-asxYmMy')
#                 await message.answer(text,
#                                      reply_markup=JoinedKeyboard.get_reply_keyboard(add_stop=False))
#                 await StartState.send_teamleads.set()
#             else:
#                 await message.answer('–ü–æ–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–æ',
#                                      reply_markup=CheckAccessKeyboard.get_reply_keyboard(add_stop=False))
#         # except AttributeError:   # –µ—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –∞–Ω–∫–µ—Ç—É –≤ –±–¥ –µ–≥–æ –Ω–µ—Ç –∏ –Ω–µ—Ç is_approved
#         #     await bot.send_message(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –í–∞—à—É –∞–Ω–∫–µ—Ç—É —É–¥–∞–ª–∏–ª–∏. '
#         #                                 '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ –∏–ª–∏ '
#         #                                 '–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–∏–º–ª–∏–¥—É –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É',
#         #                            chat_id=message.chat.id,
#         #                            reply_markup=ReplyKeyboardRemove())
#         #     await state.finish()
#         except AttributeError:
#             channels = settings.TELEGRAM_SCHOOL_CHATS
#             user_id = message.from_user.id
#             user_status = await bot.get_chat_member(chat_id=channels[0], user_id=user_id)
#
#             if user_status.status == 'kicked':
#                 await bot.send_message(text='–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ–¥–Ω–æ–º –∏–∑ –Ω–∞—à–∏—Ö —á–∞—Ç–æ–≤. '
#                                             '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–∏–º–ª–∏–¥—É –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É',
#                                        chat_id=message.chat.id,
#                                        reply_markup=ReplyKeyboardRemove())
#                 await StartState.cycle.set()
#             else:
#                 await bot.send_message(chat_id=message.chat.id,
#                                        text='–ù–µ–≤–µ—Ä–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ')
#                 moder = await get_random_moder()
#                 await send_card(message.chat.id, moder)
#                 await bot.send_message(chat_id=message.chat.id,
#                                        text='–î–ª—è –ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
#                                        reply_markup=MoveToRefilling.get_reply_keyboard(add_stop=False))
#                 await StartState.rules_for_refilling.set()
#     else:
#         await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
#                              reply_markup=CheckAccessKeyboard.get_reply_keyboard(add_stop=False))
#         await StartState.check_questionnaire.set()
@logger.catch
@dp.message_handler(state=StartState.check_questionnaire)
async def check_questionnaire(message: types.Message, state: FSMContext):
    logger.info(f'StartState.check_questionnaire —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text} '
                f'-> @{message.from_user.username} (id: {message.from_user.id})')
    answer = message.text
    if answer == CheckAccessKeyboard.A_CHECK_ACCESS:
        user = await get_user_by_tg_login(f'@{message.from_user.username}')
        if user:
            if user.is_approved:
                text = '–ê–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n–¢–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤–æ –≤—Å–µ ' \
                       '—Å–ª–µ–¥—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –¥–Ω–µ–π:\n{}\n'. \
                    format('–®–∫–æ–ª–∞ IT:\nhttps://t.me/+qGGF9z5Jy8MwMDA8'
                           '\n\n–ü—Ä–æ–µ–∫—Ç—ã:\nhttps://t.me/+HwhF6emf-asxYmMy')
                await message.answer(text,
                                     reply_markup=JoinedKeyboard.get_reply_keyboard(add_stop=False))
                await StartState.send_teamleads.set()
            else:
                await message.answer('–ü–æ–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–æ',
                                     reply_markup=CheckAccessKeyboard.get_reply_keyboard(add_stop=False))

        else:
            channels = settings.TELEGRAM_SCHOOL_CHATS
            user_id = message.from_user.id
            user_status = await bot.get_chat_member(chat_id=channels[0], user_id=user_id)

            if user_status.status == 'kicked':
                await bot.send_message(text='–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ–¥–Ω–æ–º –∏–∑ –Ω–∞—à–∏—Ö —á–∞—Ç–æ–≤. '
                                            '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–∏–º–ª–∏–¥—É –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É',
                                       chat_id=message.chat.id,
                                       reply_markup=ReplyKeyboardRemove())
                await StartState.cycle.set()
            else:
                await bot.send_message(chat_id=message.chat.id,
                                       text='–ù–µ–≤–µ—Ä–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ')
                moder = await get_random_moder()
                await send_card(message.chat.id, moder)
                await bot.send_message(chat_id=message.chat.id,
                                       text='–î–ª—è –ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                                       reply_markup=MoveToRefilling.get_reply_keyboard(add_stop=False))
                await StartState.rules_for_refilling.set()
    else:
        await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                             reply_markup=CheckAccessKeyboard.get_reply_keyboard(add_stop=False))
        await StartState.check_questionnaire.set()


@logger.catch
@dp.message_handler(state=StartState.send_teamleads)
async def send_teamleads(message: types.Message):
    logger.info(f'StartState.send_teamleads —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text} '
                f'-> @{message.from_user.username} (id: {message.from_user.id})')
    text = '–ü—Ä–∏–≤–µ—Ç! \n' \
           '–ù–æ–≤–µ–Ω—å–∫–∏–º –∏ –Ω–µ —Å–æ–≤—Å–µ–º –Ω–æ–≤–µ–Ω—å–∫–∏–º –ª—É—á—à–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–∏–º–ª–∏–¥–∞–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π/–ø—Ä–æ–µ–∫—Ç–æ–≤,' \
           ' –≤–∞—Å –ª—é–±–µ–∑–Ω–æ –¥–æ–±–∞–≤—è—Ç –≤ —á–∞—Ç –∏ –ø–æ—Å—Ç–∞—Ä–∞—é—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã\n\n' \
           '–õ–∏–¥—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:\n' \
           '@Glebser9 - –ì–ª–µ–± @yuuumei - –§–∞—Ä—Ä—É—Ö - –ª–∏–¥–µ—Ä—ã Backend\n' \
           '@Ivanchurakof¬†- –ò–≤–∞–Ω - –ª–∏–¥–µ—Ä Frontend\n' \
           '@Sor_ig - –ò–≥–æ—Ä—å -¬†–ª–∏–¥–µ—Ä DS/ML\n' \
           '@abstraducks - –õ–∏–∑–∞ - –ª–∏–¥–µ—Ä –î–∏–∑–∞–π–Ω–∞\n' \
           '@poddubniysergey198 - –°–µ—Ä–≥–µ–π - –ª–∏–¥–µ—Ä Android/ IOS —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n' \
           '@poddubniysergey198 - –°–µ—Ä–≥–µ–π - –ª–∏–¥–µ—Ä –æ—Ç–¥–µ–ª–∞ –ê–¥–∞–ø—Ç–∞—Ü–∏–∏\n' \
           '@MicoDi - –ú–∏–ª–∞ - –ª–∏–¥–µ—Ä –æ—Ç–¥–µ–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n' \
           '@aanatyrnal - –ê–Ω–≥–µ–ª–∏–Ω–∞ –ø–æ –æ–±—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º\n' \
           '@MicoDi - –ú–∏–ª–∞ - —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —à–∫–æ–ª—ã IT' 
    await message.answer(text,
                         reply_markup=IHaveRead.get_reply_keyboard(add_stop=False))
    await StartState.send_instructions.set()


@logger.catch
@dp.message_handler(state=StartState.send_instructions)
async def check_membership(message: types.Message):
    logger.info(f'StartState.send_instructions —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text} '
                f'-> @{message.from_user.username} (id: {message.from_user.id})')

    text = '–ü—Ä–∏–≤–µ—Ç!\n\n' \
           '–ò –≤–æ—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –±–æ—Ç –¥–∞–ª —Ç–µ–±–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—É—Å—Ç–æ–π —á–∞—Ç –®–∫–æ–ª—ã –∏ –Ω–∞ –∫–∞–Ω–∞–ª —Å –ü—Ä–æ–µ–∫—Ç–∞–º–∏.' \
           ' –¢—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª(–∞) –∏ –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å? –°–µ–π—á–∞—Å —Ä–∞—Å—Å–∫–∞–∂—É:\n\n' \
           '1. –ù–∞–ø–∏—à–∏ —Å–≤–æ–µ–º—É —Ç–∏–º–ª–∏–¥—É. –¢–∏–º–ª–∏–¥ ‚Äì –∑–≤–µ–∑–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–≤–µ–¥–µ—Ç —Ç–µ–±—è. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Ç–∏–º–ª–∏–¥:\n' \
           '-  –º–æ–∂–µ—Ç –¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ü–µ–ª–æ–º (–¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ç–≤–æ–∏—Ö —Ö–∞—Ä–¥–æ–≤) –∏–ª–∏ –ø–æ–¥—Å–∫–∞–∂–µ—Ç' \
           ' –ø–æ –∑–∞–¥–∞–Ω–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞;\n' \
           '- –¥–∞—Å—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Å—Ä–∞–∑—É –∏–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è);\n' \
           '- –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã;\n' \
           '- –ø–æ–¥—Å–∫–∞–∂–µ—Ç, –≤ –∫–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –æ—Ç–∫—Ä—ã—Ç –Ω–∞–±–æ—Ä.\n\n' \
           '2. –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫–∞—á–∞—Ç—å—Å—è –∏ –ø—Ä–∏–Ω—è—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –ø–æ–º–æ—â–∏' \
           ' –∏ —Ä–∞–∑–≤–∏—Ç–∏–∏ —à–∫–æ–ª—ã (–æ—Ç–¥–µ–ª –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ).\n' \
           '–û—Ç–¥–µ–ª –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ–º–æ–∂–µ—Ç –æ—Å–≤–æ–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ project-manager (–ø–∏—Å–∞—Ç—å –ö–∞—Ä–µ–Ω—É), –∞ –æ—Ç–¥–µ–ª –∞–¥–∞–ø—Ç–∞—Ü–∏–∏' \
           ' –æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–º–æ—â—å –Ω–æ–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º (–µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–æ–º, –ø–∏—à–∏ –ª–∏–¥–µ—Ä—É –æ—Ç–¥–µ–ª–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏).\n\n' \
           '–£ –Ω–∞—Å —Ç–∞–∫–∂–µ –µ—Å—Ç—å –∫—Ä—É—Ç–æ–π –æ—Ç–¥–µ–ª –æ–±—â–µ–Ω–∏—è —Å —Ñ–æ–Ω–¥–∞–º–∏. –ê –∫–∞–∫ –ø–æ-–¥—Ä—É–≥–æ–º—É —É –Ω–∞—Å –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø—Ä–æ–µ–∫—Ç—ã,' \
           ' –∞ —É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –®–∫–æ–ª—ã –∫–ª–∞—Å—Å–Ω—ã–µ —Ç–∞—Å–æ—á–∫–∏ –∏ –∫—Ä—É—Ç–æ–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç? –¢–∞–∫–∂–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ –ª—é–¥–∏,' \
           ' –∫–æ—Ç–æ—Ä—ã–µ –æ–±—â–∞—é—Ç—Å—è —Å –æ–±—É—á–∞—é—â–∏–º–∏/—É—á–µ–±–Ω—ã–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏ (–ø–æ—ç—Ç–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–∞—Å—Ç–µ—Ç).\n\n' \
           '–í –®–∫–æ–ª–µ –∑–∞–ø—É—â–µ–Ω–æ –æ–Ω–ª–∞–π–Ω-–æ–±—É—á–µ–Ω–∏–µ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º. ' \
           '–î–ª—è –æ–Ω–ª–∞–π–Ω-–æ–±—É—á–µ–Ω–∏—è - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç –∏ –∞–Ω–æ–Ω—Å –≤ –æ–±—â–µ–º —á–∞—Ç–µ. \n\n' \
           '–£—á–∞—Å—Ç–Ω–∏–∫–∏ –®–∫–æ–ª—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∞–π—Ç:\n' \
           'http://guild-of-developers.ru\n\n' \
           '–®–∏–∫–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:\n' \
           '1. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏;\n' \
           '2. –°—Ç–∞—Ç—å —Ç–∏–º–ª–∏–¥–æ–º –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ —Å–≤–æ–µ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é;\n' \
           '3. –°—Ç–∞—Ç—å –ø—Ä–æ–¥–∂–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞\n\n' \
           '–ü—è—Ç–Ω–∏—á–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ –≤ 19:00\n' \
           '–ï—Å–ª–∏ –≤—ã –∏–∑ –ú–æ—Å–∫–≤—ã, —è –±—ã –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞–ª –ø–æ—Å–µ—Ç–∏—Ç—å. –î–ª—è –æ–Ω–ª–∞–π–Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –£—Ä–æ–∫–æ–≤.\n\n'
    await message.answer(text, reply_markup=IHaveRead.get_reply_keyboard(add_stop=False))
    await StartState.adaptaion_chat.set()


@logger.catch
@dp.message_handler(state=StartState.adaptaion_chat)
async def adaptaion_chat(message: types.Message):
    text = '–í —á–∞—Ç–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Ç–µ–±–µ –æ–±—ä—è—Å–Ω—è—Ç –ø—Ä–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —à–∫–æ–ª—ã –∏ –æ—Ç–≤–µ—Ç—è—Ç –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤–æ–ø—Ä–æ—Å—ã, –≤—Å—Ç—É–ø–∞–π!\n' \
           'https://t.me/+fm_N4tk4oMRhMmY6'
    await message.answer(text, reply_markup=JoinedKeyboard.get_reply_keyboard(add_stop=False))
    await StartState.friday_meetings.set()


@logger.catch
@dp.message_handler(state=StartState.friday_meetings)
async def friday_meetings(message: types.Message):
    text = '‚ùóÔ∏è–í–ù–ò–ú–ê–ù–ò–ï‚ùóÔ∏è\n\n' \
           '–¢—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –ø—è—Ç–Ω–∏—á–Ω—ã—Ö —Å–æ–±—Ä–∞–Ω–∏–π –ø–µ—Ä–µ–µ–∑–∂–∞—é—Ç –≤ —á–∞—Ç - –®–∫–æ–ª–∞  IT | –£—Ä–æ–∫–∏:\n' \
           'https://t.me/+YgsWJg_2274xYmI0'
    await message.answer(text, reply_markup=JoinedAllKeyboard.get_reply_keyboard(add_stop=False))
    await StartState.check_membership.set()


@logger.catch
@dp.message_handler(state=StartState.check_membership)
async def check_membership(message: types.Message, state: FSMContext):
    logger.info(f'StartState.check_membership —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text} '
                f'-> @{message.from_user.username} (id: {message.from_user.id})')
    is_member = True
    channels = settings.TELEGRAM_SCHOOL_CHATS
    is_first_check = True
    user_id = message.from_user.id

    while True:
        for channel in channels:
            user_status = await bot.get_chat_member(chat_id=channel, user_id=user_id)
            if user_status.status == 'kicked':
                await message.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ–¥–Ω–æ–º –∏–∑ –Ω–∞—à–∏—Ö —á–∞—Ç–æ–≤. '
                                     '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–∏–º–ª–∏–¥—É –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É',
                                     reply_markup=ReplyKeyboardRemove())
                await delete_user(user_id, channels)
                await state.finish()
                return
            elif user_status.status == 'left':
                is_member = False
                if is_first_check:
                    await message.answer('–ï—Å–ª–∏ –í—ã –Ω–µ –≤—Å—Ç—É–ø–∏—Ç–µ '
                                         '–≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—É—Ç–æ–∫, –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞',
                                         reply_markup=ReplyKeyboardRemove())
                    is_first_check = False
                    await asyncio.sleep(86_400)
                    break
                else:
                    await bot.send_message(chat_id=settings.TELEGRAM_MODERS_CHAT_ID,
                                           text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –∫–∏–∫–Ω—É—Ç'
                                                f' –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –¥–≤—É—Ö —Å—É—Ç–æ–∫')
                    await message.answer('–ñ–∞–ª—å, –Ω–æ –ø—Ä–∏–¥–µ—Ç—Å—è –Ω–∞–º —Ä–∞—Å—Å—Ç–∞—Ç—å—Å—è. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è',
                                         reply_markup=ReplyKeyboardRemove())
                    await delete_user(user_id, channels)
                    await StartState.cycle.set()
                    return
        if is_member:
            await message.answer('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –í—ã —Å –Ω–∞–º–∏!', reply_markup=ReplyKeyboardRemove())
            await state.finish()
            return


@logger.catch
@dp.message_handler(state=StartState.get_moder)
async def get_moder(message: types.Message, state: FSMContext):
    logger.info(f'StartState.get_moder —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {message.text} '
                f'-> @{message.from_user.username} (id: {message.from_user.id})')
    answer = message.text
    if answer == settings.SECRET_KEY:
        await update_user_status(message.from_user.id)
        await message.answer('–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã',
                             reply_markup=ReplyKeyboardRemove())
        await state.finish()
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞',
                             reply_markup=StopBotKeyboard.get_reply_keyboard())
        await StartState.check_questionnaire.set()


@logger.catch
@dp.message_handler(state=StartState.cycle)
async def cycle():
    await StartState.cycle.set()
